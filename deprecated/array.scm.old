;; arrays

;; i include the general version and overwrite the specialized one after ! it's rough but it works
(include "../array.scm")

;; SRFI 105 : Curly-infix-expressions allows a syntax like {Array[index]} with vectors
;; and arrays of any dimensions,size and shape

;; for guile
;; (define T (make-vector 5))
;; (vector-set! T 3 7)
;; scheme@(guile-user)> {T[3]}
;; $3 = 7
;; {T[3] <- 7}
;; 7

;; scheme@(guile-user)> (define a (make-array 999 '(1 2) '(3 4)))
;; scheme@(guile-user)> (array-ref a 2 4)
;; $3 = 999

;; scheme@(guile-user)> {a[2 4]}
;; $9 = 999

;; scheme@(guile-user)> (define b (make-array 'ho 3))
;; scheme@(guile-user)> (array-ref b 1)
;; $13 = ho

;; scheme@(guile-user)> {b[2]}
;; $15 = ho

;; scheme@(guile-user)> {a[2 4] <- 7}
;; scheme@(guile-user)> {a[2 4]}
;; $19 = 7
;; scheme@(guile-user)> {a[1 3] <- 5}
;; scheme@(guile-user)> {a[1 3] <- a[2 4]}
;; scheme@(guile-user)> {a[1 3]}
;; $20 = 7

(define-syntax $bracket-apply$
  (syntax-rules ()
    
    ((_ array index)
     (begin ;;(display "$bracket-apply$") (newline)
	    (if (or (vector? array) (growable-vector? array)) ;;{(vector? array) or (growable-vector? array)}
		(vector-ref array index)
		(array-ref array index))))
    
    ((_ array index ...)
     (begin ;;(display "$bracket-apply$") (newline)
	    (array-ref array index ...))))) 






;; scheme@(guile-user)> {a[2 4] ← 7}
;; $1 = 7

;; scheme@(guile-user)> {a[2 4]}
;; $1 = 999
;; scheme@(guile-user)> {a[2 4] ← 7}
;; $2 = 7
;; scheme@(guile-user)> {a[2 4]}
;; $3 = 7
;; scheme@(guile-user)> {1 → a[2 4]}
;; $4 = 1
;; scheme@(guile-user)> {a[2 4]}
;; $5 = 1
;; {x ← 2}
;;
;; (define T (make-vector 5))
;; scheme@(guile-user)> {T[3] ← 7}
;; ← : vector or array set!
;; $1 = 7
;;
;; scheme@(guile-user)> {T[3]}
;; $bracket-apply$
;; $3 = 7
;;
;; scheme@(guile-user)> {T[2] ← 4}
;; ← : vector or array set!
;; $2 = 4

;; scheme@(guile-user)> {T[3] ← T[2]}
;; $bracket-apply$
;; ← : vector or array set!
;; $4 = 4
;; scheme@(guile-user)> {T[3]}
;; $bracket-apply$
;; $5 = 4
(define-syntax ← ;; APL : x←7 
  (syntax-rules ()
    ;;  special form like : (← ($bracket-apply$ T 3) ($bracket-apply$ T 4))
    
    ;; one dimension array, example: {a[4] ← 7}
    ;; in fact funct-or-macro is a MACRO and it is $bracket-apply$ of SRFI 105
    ((_ (funct-or-macro array index) expr) (let ((tmp expr)) ;; to avoid compute it twice
						 
    					     ;; (if (equal? (quote $bracket-apply$) (quote funct-or-macro)) ;; test funct-or-macro equal $bracket-apply$
						 
    						 ;; normal case
						 ;; {T[2] ← 4}
						 ;; {T[3] ← T[2]}
						 (begin
						   ;;(display "← : vector or array set!") (newline)
						   (if (or (vector? array) or (growable-vector? array)) ;;{(vector? array) or (growable-vector? array)}
						       (vector-set! array index tmp)
						       (array-set! array tmp index)))
						 
    						 ;; ;; rare case  (to prevent any error)
;; 						 (let ((var (funct-or-macro array index))) ;; MUST be in a variable , otherwise:
;; ;; While compiling expression:
;; ;; Syntax error:
;; ;; unknown location: quote: bad syntax in form quote
;; 						   (display "← : variable set! after creation") (newline)
;; 						   (set! var tmp)))
					     
    					     tmp))


    ;; multi dimensions array :  {a[2 4] ← 7}
    ;; in fact funct-or-macro is a MACRO and it is $bracket-apply$ of SRFI 105
    ((_ (funct-or-macro array index ...) expr) (let ((tmp expr)) ;; to avoid compute it twice
  						 
						 ;; (if (equal? (quote $bracket-apply$) (quote funct-or-macro)) ;; test funct-or-macro equal $bracket-apply$
						     ;; normal case
						     (begin
						       ;;(display "← : multidimensional vector or array set!") (newline)
						       (array-set! array tmp index ...))
						     
						     ;; rare case (to prevent any error)
						     ;; (let ((var (funct-or-macro array index ...))) ;; MUST be in a variable
						     ;;   (display "← : variable set! after creation (multidimensional)") (newline)
						     ;;   (set! var tmp)))
					     
						 tmp))

    ;; compact form but will display a warning: possibly wrong number of arguments to `vector-set!'
    ;; and if i remove ellipsis it is a severe error
    ;; ((_ (funct-or-macro array index ...) expr) (let ((tmp expr)
    ;; 						     (var (funct-or-macro array index ...)))
    ;; 						 (if (equal? (quote $bracket-apply$) (quote funct-or-macro)) ;; test funct-or-macro equal $bracket-apply$
    ;; 						     ;; normal case
    ;; 						     (if {(vector? array) or (growable-vector? array)}
    ;; 							 (vector-set! array index ... tmp)
    ;; 							 (array-set! array tmp index ...))
						     
    ;; 						     ;; rare case (to prevent any error)
    ;; 						     (set! var tmp))
					     
    ;; 						 tmp))

    ;; (← x 5)
    ((_ var expr) (let ((tmp expr))
		    (display "← : variable set!") (newline)
		    (set! var tmp)
		    tmp))))

     ;;  (define var expr)))))


(define-syntax →
  (syntax-rules ()
    ;;  special form like : (→ ($bracket-apply$ T 3) ($bracket-apply$ T 4))

    ;;((_ expr (funct-or-macro array index)) {array[index] ← expr}  )
    ((_ expr (funct-or-macro array index)) (← array[index]  expr)  )

    ;;((_ expr (funct-or-macro array index ...)) {array[index ...] ← expr} )
    ((_ expr (funct-or-macro array index ...)) (← array[index ...] expr) )
    
    ;; (→ 5 x)
    ;; ((_ expr var) {var ← expr})))
    ((_ expr var) (← var expr))))







