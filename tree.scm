
;; > (depth 3)
;; 1
;; > (depth '(+ 2 3))
;; 2
;; > (depth '(+ 2 (* 3 4 (/ 5 6))))
;; 4
(define (depth t)
  (if (atom? t)
      1
      (+ 1
	 (apply max
		(map depth
		     (rest t)))))) 


;;  (goodstein-init-atomic-rec-depth (expt 2 4))
;; depth of P,  d = 2
;; G(16)(1)=(2 ^ (2 ^ 2))
;; P(16)(1)=(ω ^ (ω ^ ω))
;; depth of P,  d = 2
;; G(16)(2)=((2 * (3 ^ ((2 * (3 ^ 2)) + (2 * 3) + 2))) + (2 * (3 ^ ((2 * (3 ^ 2)) + (2 * 3) + 1))) + (2 * (3 ^ ((2 * (3 ^ 2)) + (2 * 3)))) + (2 * (3 ^ ((2 * (3 ^ 2)) + 3 + 2))) + (2 * (3 ^ ((2 * (3 ^ 2)) + 3 + 1))) + (2 * (3 ^ ((2 * (3 ^ 2)) + 3))) + (2 * (3 ^ ((2 * (3 ^ 2)) + 2))) + (2 * (3 ^ ((2 * (3 ^ 2)) + 1))) + (2 * (3 ^ (2 * (3 ^ 2)))) + (2 * (3 ^ ((3 ^ 2) + (2 * 3) + 2))) + (2 * (3 ^ ((3 ^ 2) + (2 * 3) + 1))) + (2 * (3 ^ ((3 ^ 2) + (2 * 3)))) + (2 * (3 ^ ((3 ^ 2) + 3 + 2))) + (2 * (3 ^ ((3 ^ 2) + 3 + 1))) + (2 * (3 ^ ((3 ^ 2) + 3))) + (2 * (3 ^ ((3 ^ 2) + 2))) + (2 * (3 ^ ((3 ^ 2) + 1))) + (2 * (3 ^ (3 ^ 2))) + (2 * (3 ^ ((2 * 3) + 2))) + (2 * (3 ^ ((2 * 3) + 1))) + (2 * (3 ^ (2 * 3))) + (2 * (3 ^ (3 + 2))) + (2 * (3 ^ (3 + 1))) + (2 * (3 ^ 3)) + (2 * (3 ^ 2)) + (2 * 3) + 2)
;; P(16)(2)=((2 * (ω ^ ((2 * (ω ^ 2)) + (2 * ω) + 2))) + (2 * (ω ^ ((2 * (ω ^ 2)) + (2 * ω) + 1))) + (2 * (ω ^ ((2 * (ω ^ 2)) + (2 * ω)))) + (2 * (ω ^ ((2 * (ω ^ 2)) + ω + 2))) + (2 * (ω ^ ((2 * (ω ^ 2)) + ω + 1))) + (2 * (ω ^ ((2 * (ω ^ 2)) + ω))) + (2 * (ω ^ ((2 * (ω ^ 2)) + 2))) + (2 * (ω ^ ((2 * (ω ^ 2)) + 1))) + (2 * (ω ^ (2 * (ω ^ 2)))) + (2 * (ω ^ ((ω ^ 2) + (2 * ω) + 2))) + (2 * (ω ^ ((ω ^ 2) + (2 * ω) + 1))) + (2 * (ω ^ ((ω ^ 2) + (2 * ω)))) + (2 * (ω ^ ((ω ^ 2) + ω + 2))) + (2 * (ω ^ ((ω ^ 2) + ω + 1))) + (2 * (ω ^ ((ω ^ 2) + ω))) + (2 * (ω ^ ((ω ^ 2) + 2))) + (2 * (ω ^ ((ω ^ 2) + 1))) + (2 * (ω ^ (ω ^ 2))) + (2 * (ω ^ ((2 * ω) + 2))) + (2 * (ω ^ ((2 * ω) + 1))) + (2 * (ω ^ (2 * ω))) + (2 * (ω ^ (ω + 2))) + (2 * (ω ^ (ω + 1))) + (2 * (ω ^ ω)) + (2 * (ω ^ 2)) + (2 * ω) + 2)
;; depth of P,  d = 2
(define (depth-select t s)

  (if (atom? t)

      0

      (+
       
       (if (eq? (first t) s)
	   1
	   0)

       (apply max
	      (map (lambda (x)
		     (depth-select x s))
		   (rest t))))))

