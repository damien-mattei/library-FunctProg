#lang racket

; predicate to check if a number map to another by an exposant
; (map-by-exp? 7 1) -> 11
; (map-by-exp? 7 2) -> #f
(define (map-by-exp? x e)
  (let [(c (((3 . * . x) . + . 1) . / . (2 . expt . e)))]
    (if (and (integer? c) (odd? c))
	c
	#f )))

; compute tuple if it exists for a starting number and the exponent list
; (compute-tuple 7  '(1 1 2)) -> '(7 11 17 13)
(define (compute-tuple x exp-seq)
  (if (null? exp-seq)
      (list x)
      (let [(c (map-by-exp? x (first exp-seq)))]
	(if (not c) ; not mapping by exponent
	    (list x)
	    (cons x (compute-tuple c (rest exp-seq)))))))

; compute tuple if it exists for a starting number and the exponent list
; more readable version
;  (compute-tuple-readable 7  '(1 1 2)) -> '(7 11 17 13)
(define (compute-tuple-readable x exp-seq)
  (let [(c -1)]
    (if (or (null? exp-seq) (begin (set! c (map-by-exp? x (first exp-seq))) (not c)))
	(list x)
	(cons x (compute-tuple c (rest exp-seq))))))

; compute tuple if it exists for a starting number and the exponent list
;
; (compute-tuple-non-efficiently 7  '(1 1 2)) -> '(7 11 17 13)
(define (compute-tuple-non-efficiently x exp-seq)
  (if (or (null? exp-seq) (not (map-by-exp? x (first exp-seq))))
      (list x)
      (cons x (compute-tuple (map-by-exp? x (first exp-seq)) (rest exp-seq)))))

; compute the tuple set for an exponent sequence and up to i-max level
; (compute-tuple-set 7 '(1 1 2)) ->
; 1 1 (1)
; 2 11 (3 5)
; 3 101 (5)
; (compute-tuple-set 15 '(1 1 2))
; 1 1    (1)
; 2 11   (3 5)
; 3 101  (5)
; 4 111  (7 11 17 13)
; 5 1001 (9)
; 6 1011 (11 17)
; 7 1101 (13)
(define (compute-tuple-set i-max exp-seq)
  (let [(n 0) (res '())]
    (for ((i (in-range 1 i-max 2)))
	 (set! n (+ n 1))
	 (display n) (display " ")
	 (set! res (compute-tuple i exp-seq))
	 #;(printf "~b " i) (display res) (printf "\n"))))

;; compute the distance functions d(1,i) and d(i)(see Peter Schorer web site http://occampress.com/)
;; > (take '(1 2 3 4 5) 3)
;; '(1 2 3)
;; > take
;; #<procedure:take>
(define (d1i i exp-seq)
  (let [(expos (take exp-seq i))
	(res 2)]
    (for [(expo expos)]
	 (set! res (* res (expt 2 expo))))
    res))

(define (dii i)
  (* 2 (expt 3 (- i 1))))




;; > (compute-tuple-set 500 '(3 2) )
;; 1 (1)
;; 2 (3)
;; 3 (5)
;; 4 (7)
;; 5 (9)
;; 6 (11)
;; 7 (13 5)
;; 8 (15)
;; 9 (17)
;; 10 (19)
;; 11 (21)
;; 12 (23)
;; 13 (25)
;; 14 (27)
;; 15 (29 11)
;; 16 (31)
;; 17 (33)
;; 18 (35)
;; 19 (37)
;; 20 (39)
;; 21 (41)
;; 22 (43)
;; 23 (45 17 13)
;; 24 (47)
;; 25 (49)
;; 26 (51)
;; 27 (53)
;; 28 (55)
;; 29 (57)
;; 30 (59)
;; 31 (61 23)
;; 32 (63)
;; 33 (65)
;; 34 (67)
;; 35 (69)
;; 36 (71)
;; 37 (73)
;; 38 (75)
;; 39 (77 29)
;; 40 (79)
;; 41 (81)
;; 42 (83)
;; 43 (85)
;; 44 (87)
;; 45 (89)
;; 46 (91)
;; 47 (93 35)
;; 48 (95)
;; 49 (97)
;; 50 (99)
;; 51 (101)
;; 52 (103)
;; 53 (105)
;; 54 (107)
;; 55 (109 41 31)
;; 56 (111)
;; 57 (113)
;; 58 (115)
;; 59 (117)
;; 60 (119)
;; 61 (121)
;; 62 (123)
;; 63 (125 47)
;; 64 (127)
;; 65 (129)
;; 66 (131)
;; 67 (133)
;; 68 (135)
;; 69 (137)
;; 70 (139)
;; 71 (141 53)
;; 72 (143)
;; 73 (145)
;; 74 (147)
;; 75 (149)
;; 76 (151)
;; 77 (153)
;; 78 (155)
;; 79 (157 59)
;; 80 (159)
;; 81 (161)
;; 82 (163)
;; 83 (165)
;; 84 (167)
;; 85 (169)
;; 86 (171)
;; 87 (173 65 49)
;; 88 (175)
;; 89 (177)
;; 90 (179)
;; 91 (181)
;; 92 (183)
;; 93 (185)
;; 94 (187)
;; 95 (189 71)
;; 96 (191)
;; 97 (193)
;; 98 (195)
;; 99 (197)
;; 100 (199)
;; 101 (201)
;; 102 (203)
;; 103 (205 77)
;; 104 (207)
;; 105 (209)
;; 106 (211)
;; 107 (213)
;; 108 (215)
;; 109 (217)
;; 110 (219)
;; 111 (221 83)
;; 112 (223)
;; 113 (225)
;; 114 (227)
;; 115 (229)
;; 116 (231)
;; 117 (233)
;; 118 (235)
;; 119 (237 89 67)
;; 120 (239)
;; 121 (241)
;; 122 (243)
;; 123 (245)
;; 124 (247)
;; 125 (249)
;; 126 (251)
;; 127 (253 95)
;; 128 (255)
;; 129 (257)
;; 130 (259)
;; 131 (261)
;; 132 (263)
;; 133 (265)
;; 134 (267)
;; 135 (269 101)
;; 136 (271)
;; 137 (273)
;; 138 (275)
;; 139 (277)
;; 140 (279)
;; 141 (281)
;; 142 (283)
;; 143 (285 107)
;; 144 (287)
;; 145 (289)
;; 146 (291)
;; 147 (293)
;; 148 (295)
;; 149 (297)
;; 150 (299)
;; 151 (301 113 85)
;; 152 (303)
;; 153 (305)
;; 154 (307)
;; 155 (309)
;; 156 (311)
;; 157 (313)
;; 158 (315)
;; 159 (317 119)
;; 160 (319)
;; 161 (321)
;; 162 (323)
;; 163 (325)
;; 164 (327)
;; 165 (329)
;; 166 (331)
;; 167 (333 125)
;; 168 (335)
;; 169 (337)
;; 170 (339)
;; 171 (341)
;; 172 (343)
;; 173 (345)
;; 174 (347)
;; 175 (349 131)
;; 176 (351)
;; 177 (353)
;; 178 (355)
;; 179 (357)
;; 180 (359)
;; 181 (361)
;; 182 (363)
;; 183 (365 137 103)
;; 184 (367)
;; 185 (369)
;; 186 (371)
;; 187 (373)
;; 188 (375)
;; 189 (377)
;; 190 (379)
;; 191 (381 143)
;; 192 (383)
;; 193 (385)
;; 194 (387)
;; 195 (389)
;; 196 (391)
;; 197 (393)
;; 198 (395)
;; 199 (397 149)
;; 200 (399)
;; 201 (401)
;; 202 (403)
;; 203 (405)
;; 204 (407)
;; 205 (409)
;; 206 (411)
;; 207 (413 155)
;; 208 (415)
;; 209 (417)
;; 210 (419)
;; 211 (421)
;; 212 (423)
;; 213 (425)
;; 214 (427)
;; 215 (429 161 121)
;; 216 (431)
;; 217 (433)
;; 218 (435)
;; 219 (437)
;; 220 (439)
;; 221 (441)
;; 222 (443)
;; 223 (445 167)
;; 224 (447)
;; 225 (449)
;; 226 (451)
;; 227 (453)
;; 228 (455)
;; 229 (457)
;; 230 (459)
;; 231 (461 173)
;; 232 (463)
;; 233 (465)
;; 234 (467)
;; 235 (469)
;; 236 (471)
;; 237 (473)
;; 238 (475)
;; 239 (477 179)
;; 240 (479)
;; 241 (481)
;; 242 (483)
;; 243 (485)
;; 244 (487)
;; 245 (489)
;; 246 (491)
;; 247 (493 185 139)
;; 248 (495)
;; 249 (497)
;; 250 (499)
;; > (dist 3 0 '(3 2))
;; 18
;; > (dist 3 1 '(3 2))
;; 24
;; > (dist 3 2 '(3 2))
;; 64

(define (dist i j exp-seq)
  (cond ((>= j i) "Error j >= i")
	((= j 0) (* 2 (expt 3 (- i 1))))
	(else
	 (let* ((factor (* 2 (expt 3 (- i j 1))))
		(rev-exp-seq (reverse exp-seq))
		(exp-used (take rev-exp-seq j))
		(powers-2 (map (lambda (x) (expt 2 x))
			       exp-used))
		(product-powers-2 (apply * powers-2)))
	   (* factor product-powers-2)))))

;; (find-anchor-tuple 1000 '(1 3))
;; 10 (19 29 11)
;; '(19 29 11)

;; (find-anchor-tuple 1000 '(3 2))
;; 23 (45 17 13)
;; '(45 17 13)
(define (find-anchor-tuple i-max exp-seq)
  
  (let [(n 0)
	(res '())
	(lg-res 0)
	(level (+ (length exp-seq)1))]
    
    (for ((i (in-range 1 i-max 2))
	  #:break (= level lg-res))
	 (set! n (+ n 1))
	 (set! res (compute-tuple i exp-seq))
	 (set! lg-res (length res)))

    (when (= level lg-res)
	  (display n) (display " ") (display res) (printf "\n")
	  res)))
